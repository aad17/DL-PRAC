import numpy as np
import pandas as pd
import tensorflow as tf
import matplotlib.pyplot as plt

data = 'http://storage.googleapis.com/download.tensorflow.org/data/ecg.csv'

df = pd.read_csv(data, header=None)

df.head()

df.shape

X = df.drop(140, axis=1)

y = df[140]

X.head()

y.head()

from sklearn.model_selection import train_test_split

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)

train_index = y_train[y_train == 1].index

train_data = X_train.loc[train_index]

train_data.head()

from sklearn.preprocessing import MinMaxScaler
scaler = MinMaxScaler(feature_range=(0, 1))

X_train_scaled = scaler.fit_transform(train_data.copy())

X_test_scaled = scaler.fit_transform(X_test.copy())

from tensorflow.keras import Model, Sequential
from tensorflow.keras.optimizers import Adam
from tensorflow.keras.layers import Dense, Dropout
from tensorflow.keras.losses import MeanSquaredLogarithmicError

class Autoencoder(Model):
    def __init__(self, output_units, code_size=8):
        super().__init__()
        self.encoder = Sequential([
            Dense(64, activation='relu'),
            Dropout(0.1),
            Dense(32, activation='relu'),
            Dropout(0.1),
            Dense(16, activation='relu'),
            Dropout(0.1),
            Dense(code_size, activation='relu')
        ])
        self.decoder = Sequential([
            Dense(16, activation='relu'),
            Dropout(0.1),
            Dense(32, activation='relu'),
            Dropout(0.1),
            Dense(64, activation='relu'),
            Dropout(0.1),
            Dense(output_units, activation='sigmoid')
        ])
    
    def call(self, inputs):
        encoded = self.encoder(inputs)
        decoded = self.decoder(encoded)
        return decoded
        
X_train_scaled.shape

model = Autoencoder(output_units = X_train_scaled.shape[1])

model.compile(loss='msle', metrics=['mse', 'accuracy'], optimizer='adam')

model.fit(X_train_scaled, 
          X_train_scaled, 
          epochs = 20, 
          batch_size = 512, 
          validation_data = (X_test_scaled, X_test_scaled)
         )
         

